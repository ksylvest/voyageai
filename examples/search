#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "voyageai"

Entry = Data.define(:document, :embedding)

VOYAGEAI = VoyageAI::Client.new

DOCUMENTS = [
  "John is a musician.",
  "Paul is a plumber.",
  "George is a teacher.",
  "Ringo is a doctor.",
  "Lisa is a lawyer.",
  "Stuart is a painter.",
  "Brian is a writer.",
  "Jane is a chef.",
  "Bill is a nurse.",
  "Susan is a carpenter.",
].freeze

embeddings = VOYAGEAI.embed(DOCUMENTS, input_type: "document").embeddings

ENTRIES = DOCUMENTS.zip(embeddings).map do |document, embedding|
  Entry.new(document:, embedding:)
end

# @param src [Array<Float>]
# @param dst [Array<Float>]
#
# @return [Float]
def euclidean(src, dst)
  Math.sqrt(src.zip(dst).map { |a, b| (a - b)**2 }.reduce(:+))
end

# @param query [String]
def search(query:)
  embedding = VOYAGEAI.embed(query, input_type: "query").embedding

  results = ENTRIES.sort_by { |entry| euclidean(entry.embedding, embedding) }.first(4)

  documents = results.map(&:document)

  results = VOYAGEAI.rerank(query:, documents:, top_k: 2).results

  puts "query=#{query}"
  results.each do |reranking|
    document = documents[reranking.index]
    puts(" - #{document} (relevance_score=#{reranking.relevance_score})")
  end
end

search(query: "What do George and Ringo do?")
search(query: "Who works in the medical field?")
